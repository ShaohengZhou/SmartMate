/// <reference types="node" />
import Element from './Element';
import { CancellablePromise } from '@theintern/common';
import Session from './Session';
import Locator, { Strategy } from './lib/Locator';
import { LogEntry, Geolocation, WebDriverCookie } from './interfaces';
export default class Command<T, P = any> extends Locator<Command<Element>, Command<Element[]>, Command<void>> implements PromiseLike<T> {
    static addSessionMethod<U>(target: Command<U>, key: string, originalFn: Function): void;
    static addElementMethod<T>(target: Command<T>, key: string): void;
    private _parent;
    private _session;
    private _context;
    private _task;
    constructor(parentOrSession: Session | Command<P> | null, initialiser?: (this: Command<T>, setContext: SetContextMethod, value: T) => T | CancellablePromise<T>, errback?: (this: Command<T>, setContext: SetContextMethod, error: Error) => T | CancellablePromise<T>);
    readonly parent: Command<P, any>;
    readonly session: Session;
    readonly context: Context;
    readonly promise: CancellablePromise<any>;
    sleep(ms: number): Command<void>;
    end(numCommandsToPop?: number): Command<void>;
    then<U = T, R = never>(callback?: ((this: Command<T>, value: T, setContext: SetContextMethod) => U | PromiseLike<U>) | null | undefined, errback?: ((this: Command<T>, error: any) => R | PromiseLike<R>) | null | undefined): Command<U | R>;
    catch<R = never>(errback: (this: Command<T>, reason: any) => R | PromiseLike<R>): Command<T | R, any>;
    finally(callback: () => void): this;
    cancel(): this;
    find(strategy: Strategy, value: string): Command<Element, any>;
    findAll(strategy: Strategy, value: string): Command<Element[], any>;
    findDisplayed(strategy: Strategy, value: string): Command<Element, any>;
    private _callFindElementMethod;
    private _callElementMethod;
    private _callSessionMethod;
    getTimeout(type: string): Command<number, any>;
    setTimeout(type: string, ms: number): Command<void, any>;
    getCurrentWindowHandle(): Command<string, any>;
    getAllWindowHandles(): Command<string[], any>;
    getCurrentUrl(): Command<string, any>;
    get(url: string): Command<void, any>;
    goForward(): Command<void, any>;
    goBack(): Command<void, any>;
    refresh(): Command<void, any>;
    execute<T = any>(script: Function | string, args?: any[]): Command<T, any>;
    executeAsync<T = any>(script: Function | string, args?: any[]): Command<T, any>;
    takeScreenshot(): Command<Buffer, any>;
    getAvailableImeEngines(): Command<string[], any>;
    getActiveImeEngine(): Command<string, any>;
    isImeActivated(): Command<boolean, any>;
    deactivateIme(): Command<void, any>;
    activateIme(engine: string): Command<void, any>;
    switchToFrame(id: string | number | Element | null): Command<void, any>;
    switchToWindow(handle: string): Command<void, any>;
    switchToParentFrame(): Command<void, any>;
    closeCurrentWindow(): Command<void, any>;
    setWindowSize(width: number, height: number): Command<void>;
    setWindowSize(windowHandle: string, width: number, height: number): Command<void>;
    getWindowSize(_windowHandle?: string): Command<{
        width: number;
        height: number;
    }, any>;
    setWindowPosition(x: number, y: number): Command<void>;
    setWindowPosition(windowHandle: string, x: number, y: number): Command<void>;
    getWindowPosition(windowHandle?: string): Command<{
        x: number;
        y: number;
    }, any>;
    maximizeWindow(windowHandle?: string): Command<void, any>;
    getCookies(): Command<WebDriverCookie[], any>;
    setCookie(cookie: WebDriverCookie): Command<void, any>;
    clearCookies(): Command<void, any>;
    deleteCookie(name: string): Command<void, any>;
    getPageSource(): Command<string, any>;
    getPageTitle(): Command<string, any>;
    getActiveElement(): Command<Element, any>;
    pressKeys(keys: string | string[]): Command<void, any>;
    getOrientation(): Command<"landscape" | "portrait", any>;
    setOrientation(orientation: 'portrait' | 'landscape'): Command<void, any>;
    getAlertText(): Command<string, any>;
    typeInPrompt(text: string | string[]): Command<void, any>;
    acceptAlert(): Command<void, any>;
    dismissAlert(): Command<void, any>;
    moveMouseTo(element?: Element, xOffset?: number, yOffset?: number): Command<void>;
    moveMouseTo(xOffset?: number, yOffset?: number): Command<void>;
    clickMouseButton(button?: number): Command<void, any>;
    pressMouseButton(button?: number): Command<void, any>;
    releaseMouseButton(button?: number): Command<void, any>;
    doubleClick(): Command<void, any>;
    tap(element: Element): Command<void, any>;
    pressFinger(x: number, y: number): Command<void, any>;
    releaseFinger(x: number, y: number): Command<void, any>;
    moveFinger(x: number, y: number): Command<void, any>;
    touchScroll(xOffset: number, yOffset: number): Command<void>;
    touchScroll(element?: Element, xOffset?: number, yOffset?: number): Command<void>;
    doubleTap(element?: Element): Command<void, any>;
    longTap(element?: Element): Command<void, any>;
    flickFinger(element: Element, xOffset: number, yOffset: number, speed?: number): Command<void>;
    flickFinger(xOffset: number, yOffset: number, speed?: number): Command<void>;
    getGeolocation(): Command<Geolocation, any>;
    setGeolocation(location: Geolocation): Command<void, any>;
    getLogsFor(type: string): Command<LogEntry[], any>;
    getAvailableLogTypes(): Command<string[], any>;
    getApplicationCacheStatus(): Command<number, any>;
    quit(): Command<void, any>;
    waitForDeleted(using: Strategy, value: string): Command<void, any>;
    getExecuteAsyncTimeout(): Command<number, any>;
    setExecuteAsyncTimeout(ms: number): Command<void, any>;
    getFindTimeout(): Command<number, any>;
    setFindTimeout(ms: number): Command<void, any>;
    getPageLoadTimeout(): Command<number, any>;
    setPageLoadTimeout(ms: number): Command<void, any>;
    click(): Command<void, any>;
    submit(): Command<void, any>;
    getVisibleText(): Command<string, any>;
    type(value: string | string[]): Command<void, any>;
    getTagName(): Command<string, any>;
    clearValue(): Command<void, any>;
    isSelected(): Command<boolean, any>;
    isEnabled(): Command<boolean, any>;
    getSpecAttribute(name: string): Command<string, any>;
    getAttribute<T = any>(name: string): Command<T, any>;
    getProperty<T = any>(name: string): Command<T, any>;
    equals(other: Element): Command<boolean, any>;
    isDisplayed(): Command<boolean, any>;
    getPosition(): Command<{
        x: number;
        y: number;
    }, any>;
    getSize(): Command<{
        width: number;
        height: number;
    }, any>;
    getComputedStyle(propertyName: string): Command<string, any>;
}
export interface SetContextMethod {
    (context: Element | Element[]): void;
}
export interface Context extends Array<any> {
    isSingle?: boolean;
    depth?: number;
}
