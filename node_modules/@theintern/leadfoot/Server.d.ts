import { CancellablePromise, RequestOptions } from '@theintern/common';
import Session from './Session';
import { Capabilities, LeadfootURL } from './interfaces';
export default class Server {
    url: string;
    requestOptions: RequestOptions;
    sessionConstructor: typeof Session;
    fixSessionCapabilities: boolean | 'no-detect';
    constructor(url: string | LeadfootURL, options?: RequestOptions);
    private _sendRequest;
    get<T>(path: string, requestData?: Object, pathParts?: string[]): CancellablePromise<T>;
    post<T>(path: string, requestData?: Object, pathParts?: string[]): CancellablePromise<T>;
    delete<T>(path: string, requestData?: Object, pathParts?: string[]): CancellablePromise<T>;
    getStatus(): CancellablePromise<any>;
    createSession<S extends Session = Session>(desiredCapabilities: Capabilities, requiredCapabilities?: Capabilities): CancellablePromise<S>;
    private _fillCapabilities;
    private _getKnownCapabilities;
    private _detectCapabilities;
    getSessions(): CancellablePromise<Session[]>;
    getSessionCapabilities(sessionId: string): CancellablePromise<Capabilities>;
    deleteSession(sessionId: string): CancellablePromise<void>;
}
