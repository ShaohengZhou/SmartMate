import { Component, Input, Output, EventEmitter } from '@angular/core';
import { AmplifyService } from '../../../providers/amplify.service';
var template = "\n<div class=\"amplify-interactions\">\n\t<div class=\"amplify-interactions-container\">\n\t\t<div class=\"amplify-form-container\">\n\t\t\t<div class=\"amplify-form-row\">\n\t\t\t\t<div class=\"amplify-interactions-conversation\">\n\t\t\t\t\t<div *ngFor=\"let message of messages\">\n\t\t\t\t\t\t<div class=\"amplify-interactions-input\">{{message.me}}</div>\n\t\t\t\t\t\t<div class=\"amplify-interactions-input-timestamp\">{{message.meSentTime}}</div>\n\t\t\t\t\t\t<div class=\"amplify-interactions-response\">{{message.bot}}</div>\n\t\t\t\t\t\t<div class=\"amplify-interactions-response-timestamp\">{{message.botSentTime}}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"amplify-interactions-actions\">\n\t\t\t\t<input #inputValue\n\t\t\t\t\ttype='text'\n\t\t\t\t\tclass=\"amplify-form-input\"\n\t\t\t\t\tplaceholder=\"Write a message\"\n\t\t\t\t\t[value]=\"inputText\"\n\t\t\t\t\t(keyup.enter)=\"onSubmit(inputValue.value)\"\n\t\t\t\t\t(change)=\"onInputChange($event.target.value)\">\n\n\t\t\t\t<button class=\"amplify-interactions-button\" (click)=\"onSubmit(inputValue.value)\"></button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n";
var ChatbotComponentCore = /** @class */ (function () {
    function ChatbotComponentCore(amplifyService) {
        this.inputText = "";
        this.clearComplete = false;
        this.messages = [];
        this.completions = {};
        this.complete = new EventEmitter();
        this.amplifyService = amplifyService;
    }
    Object.defineProperty(ChatbotComponentCore.prototype, "data", {
        set: function (data) {
            this.botName = data.bot;
            this.chatTitle = data.title;
            this.clearComplete = data.clearComplete;
            this.performOnComplete = this.performOnComplete.bind(this);
            this.amplifyService.interactions().onComplete(this.botName, this.performOnComplete);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChatbotComponentCore.prototype, "bot", {
        set: function (botName) {
            this.botName = botName;
            this.performOnComplete = this.performOnComplete.bind(this);
            this.amplifyService.interactions().onComplete(botName, this.performOnComplete);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChatbotComponentCore.prototype, "title", {
        set: function (title) {
            this.chatTitle = title;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChatbotComponentCore.prototype, "clearOnComplete", {
        set: function (clearComplete) {
            this.clearComplete = clearComplete;
        },
        enumerable: true,
        configurable: true
    });
    ChatbotComponentCore.prototype.ngOnInit = function () {
        console.log(this);
    };
    ChatbotComponentCore.prototype.performOnComplete = function (evt) {
        this.complete.emit(evt);
        if (this.clearComplete) {
            this.messages = [];
        }
    };
    ChatbotComponentCore.prototype.onInputChange = function (value) {
        this.inputText = value;
    };
    ChatbotComponentCore.prototype.onSubmit = function (e) {
        var _this = this;
        if (!this.inputText) {
            return;
        }
        var message = {
            'me': this.inputText,
            'meSentTime': new Date().toLocaleTimeString(),
            'bot': '',
            'botSentTime': ''
        };
        this.amplifyService.interactions().send(this.botName, this.inputText)
            .then(function (response) {
            _this.inputText = "";
            console.log('Interactions Response: ', response);
            message.bot = response.message;
            message.botSentTime = new Date().toLocaleTimeString();
            _this.messages.push(message);
        })
            .catch(function (error) { return console.log('Interactions Error: ', error); });
    };
    ChatbotComponentCore.decorators = [
        { type: Component, args: [{
                    selector: 'amplify-interactions-core',
                    template: template
                },] },
    ];
    /** @nocollapse */
    ChatbotComponentCore.ctorParameters = function () { return [
        { type: AmplifyService, },
    ]; };
    ChatbotComponentCore.propDecorators = {
        "complete": [{ type: Output },],
        "data": [{ type: Input },],
        "bot": [{ type: Input },],
        "title": [{ type: Input },],
        "clearOnComplete": [{ type: Input },],
    };
    return ChatbotComponentCore;
}());
export { ChatbotComponentCore };
//# sourceMappingURL=chatbot.component.core.js.map