import '../../stencil.core';
import { EventEmitter } from '../../stencil.core';
import { Config, NavOutlet, RouteID, RouteWrite } from '../../interface';
export declare class Tabs implements NavOutlet {
    private ids;
    private transitioning;
    private tabsId;
    private leavingTab?;
    private userTabbarEl?;
    el: HTMLStencilElement;
    tabs: HTMLIonTabElement[];
    selectedTab?: HTMLIonTabElement;
    config: Config;
    doc: Document;
    /**
     * A unique name for the tabs.
     */
    name?: string;
    /**
     * If `true`, the tabbar will be hidden. Defaults to `false`.
     */
    tabbarHidden: boolean;
    /**
     * If `true`, the tabs will use the router and `selectedTab` will not do anything.
     */
    useRouter: boolean;
    /**
     * Emitted when the tab changes.
     */
    ionChange: EventEmitter<{
        tab: HTMLIonTabElement;
    }>;
    /**
     * Emitted when the navigation will load a component.
     */
    ionNavWillLoad: EventEmitter<void>;
    /**
     * Emitted when the navigation is about to transition to a new component.
     */
    ionNavWillChange: EventEmitter<void>;
    /**
     * Emitted when the navigation has finished transitioning to a new component.
     */
    ionNavDidChange: EventEmitter<void>;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    componentDidUnload(): void;
    componentWillUpdate(): void;
    protected onTabMutated(): void;
    protected onTabClicked(ev: CustomEvent<HTMLIonTabElement>): void;
    /**
     * Index or the Tab instance, of the tab to select.
     */
    select(tabOrIndex: number | HTMLIonTabElement): Promise<boolean>;
    /** @internal */
    setRouteId(id: string): Promise<RouteWrite>;
    /** @internal */
    getRouteId(): Promise<RouteID | undefined>;
    /** Get the tab at the given index */
    getTab(tabOrIndex: string | number | HTMLIonTabElement): Promise<HTMLIonTabElement | undefined>;
    /**
     * Get the currently selected tab
     */
    getSelected(): Promise<HTMLIonTabElement | undefined>;
    private initTabs;
    private initSelect;
    private setActive;
    private tabSwitch;
    private notifyRouter;
    private shouldSwitch;
    hostData(): {
        class: {
            'tabbar-hidden': boolean;
        };
    };
    render(): JSX.Element[];
}
