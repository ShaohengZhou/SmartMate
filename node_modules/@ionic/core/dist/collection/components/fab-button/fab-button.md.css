:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   *
   * @prop --color: Text color of the button
   * @prop --color-activated: Text color of the button when activated
   * @prop --color-focused: Text color of the button when focused
   *
   * @prop --width: Width of the button
   * @prop --height: Height of the button
   *
   * @prop --transition: Transition of the button
   *
   * @prop --border-radius: Border radius of the button
   * @prop --border-width: Border width of the button
   * @prop --border-style: Border style of the button
   * @prop --border-color: Border color of the button
   *
   * @prop --ripple-color: Color of the button ripple effect
   *
   * @prop --box-shadow: Box shadow of the button
   *
   * @prop --margin-top: Margin top of the button
   * @prop --margin-end: Margin end of the button
   * @prop --margin-bottom: Margin bottom of the button
   * @prop --margin-start: Margin start of the button
   *
   * @prop --padding-top: Padding top of the button
   * @prop --padding-end: Padding end of the button
   * @prop --padding-bottom: Padding bottom of the button
   * @prop --padding-start: Padding start of the button
   */
  --background: var(--ion-color-primary, #3880ff);
  --background-activated: var(--ion-color-primary-shade, #3171e0);
  --background-focused: var(--ion-color-primary-shade, #3171e0);
  --color: var(--ion-color-primary-contrast, #fff);
  --color-activated: var(--ion-color-primary-contrast, #fff);
  --color-focused: var(--color-activated);
  --width: 56px;
  --height: var(--width);
  --margin-start: calc((56px - var(--width)) / 2);
  --margin-end: calc((56px - var(--width)) / 2);
  --margin-top: calc((56px - var(--height)) / 2);
  --margin-bottom: calc((56px - var(--height)) / 2);
  --transition: background-color, opacity 100ms linear;
  --ripple-color: currentColor;
  display: block;
  font-size: 14px;
  text-align: center;
  text-overflow: ellipsis;
  text-transform: none;
  white-space: nowrap;
  font-kerning: none; }

:host(.ion-color) .button-native {
  background: var(--ion-color-base);
  color: var(--ion-color-contrast); }

:host(.ion-color.focused) .button-native,
:host(.ion-color.activated) .button-native {
  background: var(--ion-color-shade);
  color: var(--ion-color-contrast); }

.button-native {
  border-radius: 50%;
  padding: var(--padding-top) var(--padding-end) var(--padding-bottom) var(--padding-start);
  margin: var(--margin-top) var(--margin-end) var(--margin-bottom) var(--margin-start);
  font-family: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  letter-spacing: inherit;
  text-decoration: inherit;
  text-overflow: inherit;
  text-transform: inherit;
  text-align: inherit;
  white-space: inherit;
  color: inherit;
  display: block;
  position: relative;
  width: var(--width);
  height: var(--height);
  transform: var(--transform);
  transition: var(--transition);
  border: 0;
  outline: none;
  background: var(--background);
  background-clip: padding-box;
  color: var(--color);
  line-height: var(--heigh);
  box-shadow: var(--box-shadow);
  contain: strict;
  cursor: pointer;
  overflow: hidden;
  z-index: 0;
  appearance: none; }

.button-native[disabled] {
  cursor: default;
  opacity: .5;
  pointer-events: none; }

::slotted(ion-icon) {
  line-height: 1; }

.button-inner {
  left: 0;
  right: 0;
  top: 0;
  display: flex;
  position: absolute;
  flex-flow: row nowrap;
  flex-shrink: 0;
  align-items: center;
  justify-content: center;
  height: 100%;
  transition: all ease-in-out 300ms;
  transition-property: transform, opacity; }

:host(.activated) .button-native {
  background: var(--background-activated);
  color: var(--color-activated); }

:host(.focused) .button-native {
  background: var(--background-focused);
  color: var(--color-focused); }

:host(.fab-button-disabled) {
  pointer-events: none; }

.button-native[disabled] {
  cursor: default;
  opacity: .5;
  pointer-events: none; }

::slotted(ion-icon) {
  line-height: 1; }

:host([mini]) {
  --width: 40px; }

.close-icon {
  left: 0;
  right: 0;
  top: 0;
  display: flex;
  position: absolute;
  align-items: center;
  justify-content: center;
  height: 100%;
  transform: scale(0.4) rotateZ(-45deg);
  transition: all ease-in-out 300ms;
  transition-property: transform, opacity;
  opacity: 0; }

:host(.fab-button-close-active) .close-icon {
  transform: scale(1) rotateZ(0deg);
  opacity: 1; }

:host(.fab-button-close-active) .button-inner {
  transform: scale(0.4) rotateZ(45deg);
  opacity: 0; }

ion-ripple-effect {
  color: var(--ripple-color); }

:host {
  --box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.14), 0 4px 5px rgba(0, 0, 0, 0.1);
  --transition: box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1), background-color 300ms cubic-bezier(0.4, 0, 0.2, 1), color 300ms cubic-bezier(0.4, 0, 0.2, 1); }

:host(.activated) {
  --box-shadow: 0 5px 15px 0 rgba(0, 0, 0, 0.4), 0 4px 7px 0 rgba(0, 0, 0, 0.1); }

::slotted(ion-icon),
.close-icon {
  font-size: 24px; }

:host(.fab-button-in-list) {
  --color: var(--ion-color-light-contrast, #000);
  --background: var(--ion-color-light, #f4f5f8);
  --transition: transform 200ms ease 10ms ease 10ms opacity 200ms ease 10ms ease 10ms box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) background-color 300ms cubic-bezier(0.4, 0, 0.2, 1) color 300ms cubic-bezier(0.4, 0, 0.2, 1); }

:host(.fab-button-in-list.activated) {
  --background: var(--ion-color-primary-tint, #4c8dff); }
