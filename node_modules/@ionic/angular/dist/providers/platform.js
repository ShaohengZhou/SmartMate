var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { EventEmitter, Injectable } from '@angular/core';
import { getPlatforms, isPlatform } from '@ionic/core';
import { proxyEvent } from '../util/util';
var BackButtonEmitter = /** @class */ (function (_super) {
    __extends(BackButtonEmitter, _super);
    function BackButtonEmitter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackButtonEmitter.prototype.subscribeWithPriority = function (priority, callback) {
        return this.subscribe(function (ev) {
            ev.register(priority, callback);
        });
    };
    return BackButtonEmitter;
}(EventEmitter));
export { BackButtonEmitter };
var Platform = /** @class */ (function () {
    function Platform() {
        /**
         * @hidden
         */
        this.backButton = new BackButtonEmitter();
        /**
         * The pause event emits when the native platform puts the application
         * into the background, typically when the user switches to a different
         * application. This event would emit when a Cordova app is put into
         * the background, however, it would not fire on a standard web browser.
         */
        this.pause = new EventEmitter();
        /**
         * The resume event emits when the native platform pulls the application
         * out from the background. This event would emit when a Cordova app comes
         * out from the background, however, it would not fire on a standard web browser.
         */
        this.resume = new EventEmitter();
        /**
         * The resize event emits when the browser window has changed dimensions. This
         * could be from a browser window being physically resized, or from a device
         * changing orientation.
         */
        this.resize = new EventEmitter();
        proxyEvent(this.pause, document, 'pause');
        proxyEvent(this.resume, document, 'resume');
        proxyEvent(this.backButton, document, 'ionBackButton');
        proxyEvent(this.resize, window, 'resize');
        var readyResolve;
        this._readyPromise = new Promise(function (res) { readyResolve = res; });
        if (window['cordova']) {
            document.addEventListener('deviceready', function () {
                readyResolve('cordova');
            }, { once: true });
        }
        else {
            readyResolve('dom');
        }
    }
    /**
     * @returns returns true/false based on platform.
     * @description
     * Depending on the platform the user is on, `is(platformName)` will
     * return `true` or `false`. Note that the same app can return `true`
     * for more than one platform name. For example, an app running from
     * an iPad would return `true` for the platform names: `mobile`,
     * `ios`, `ipad`, and `tablet`. Additionally, if the app was running
     * from Cordova then `cordova` would be true, and if it was running
     * from a web browser on the iPad then `mobileweb` would be `true`.
     *
     * ```
     * import { Platform } from 'ionic-angular';
     *
     * @Component({...})
     * export MyPage {
     *   constructor(public platform: Platform) {
     *     if (this.platform.is('ios')) {
     *       // This will only print when on iOS
     *       console.log('I am an iOS device!');
     *     }
     *   }
     * }
     * ```
     *
     * | Platform Name   | Description                        |
     * |-----------------|------------------------------------|
     * | android         | on a device running Android.       |
     * | cordova         | on a device running Cordova.       |
     * | ios             | on a device running iOS.           |
     * | ipad            | on an iPad device.                 |
     * | iphone          | on an iPhone device.               |
     * | phablet         | on a phablet device.               |
     * | tablet          | on a tablet device.                |
     * | electron        | in Electron on a desktop device.   |
     * | pwa             | as a PWA app.   |
     * | mobile          | on a mobile device.                |
     * | desktop         | on a desktop device.               |
     * | hybrid          | is a cordova or capacitor app.     |
     *
     */
    Platform.prototype.is = function (platformName) {
        return isPlatform(window, platformName);
    };
    /**
     * @returns the array of platforms
     * @description
     * Depending on what device you are on, `platforms` can return multiple values.
     * Each possible value is a hierarchy of platforms. For example, on an iPhone,
     * it would return `mobile`, `ios`, and `iphone`.
     *
     * ```
     * import { Platform } from 'ionic-angular';
     *
     * @Component({...})
     * export MyPage {
     *   constructor(public platform: Platform) {
     *     // This will print an array of the current platforms
     *     console.log(this.platform.platforms());
     *   }
     * }
     * ```
     */
    Platform.prototype.platforms = function () {
        return getPlatforms(window);
    };
    Platform.prototype.ready = function () {
        return this._readyPromise;
    };
    Object.defineProperty(Platform.prototype, "isRTL", {
        get: function () {
            return document.dir === 'rtl';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get the query string parameter
     */
    Platform.prototype.getQueryParam = function (key) {
        return readQueryParam(window.location.href, key);
    };
    Platform.prototype.isLandscape = function () {
        return !this.isPortrait();
    };
    Platform.prototype.isPortrait = function () {
        return window.matchMedia('(orientation: portrait)').matches;
    };
    Platform.prototype.testUserAgent = function (expression) {
        return navigator.userAgent.indexOf(expression) >= 0;
    };
    Platform.prototype.url = function () {
        return window.location.href;
    };
    Platform.prototype.width = function () {
        return window.innerWidth;
    };
    Platform.prototype.height = function () {
        return window.innerHeight;
    };
    Platform.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Platform.ctorParameters = function () { return []; };
    return Platform;
}());
export { Platform };
function readQueryParam(url, key) {
    key = key.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    var regex = new RegExp('[\\?&]' + key + '=([^&#]*)');
    var results = regex.exec(url);
    return results ? decodeURIComponent(results[1].replace(/\+/g, ' ')) : null;
}
