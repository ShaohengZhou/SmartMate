var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { Injectable, Optional } from '@angular/core';
import { Location } from '@angular/common';
import { Router } from '@angular/router';
var NavController = /** @class */ (function () {
    function NavController(location, router) {
        var _this = this;
        this.location = location;
        this.router = router;
        this.intent = 0 /* Auto */;
        this.animated = true;
        this.stack = [];
        window && window.document.addEventListener('ionBackButton', function (ev) {
            ev.detail.register(0, function () { return _this.goBack(); });
        });
    }
    NavController.prototype.navigateForward = function (url, animated, extras) {
        this.setIntent(1 /* Forward */, animated);
        if (Array.isArray(url)) {
            return this.router.navigate(url, extras);
        }
        else {
            return this.router.navigateByUrl(url, extras);
        }
    };
    NavController.prototype.navigateBack = function (url, animated, extras) {
        this.setIntent(2 /* Back */, animated);
        extras = __assign({ replaceUrl: true }, extras);
        if (Array.isArray(url)) {
            return this.router.navigate(url, extras);
        }
        else {
            return this.router.navigateByUrl(url, extras);
        }
    };
    NavController.prototype.navigateRoot = function (url, animated, extras) {
        this.setIntent(3 /* Root */, animated);
        if (Array.isArray(url)) {
            return this.router.navigate(url, extras);
        }
        else {
            return this.router.navigateByUrl(url, extras);
        }
    };
    NavController.prototype.goBack = function (animated) {
        this.setIntent(2 /* Back */, animated);
        return this.location.back();
    };
    NavController.prototype.setIntent = function (intent, animated) {
        this.intent = intent;
        this.animated = (animated === undefined)
            ? intent !== 3 /* Root */
            : animated;
    };
    NavController.prototype.consumeTransition = function () {
        var guessDirection = this.guessDirection();
        var direction = 0;
        var animated = false;
        if (this.intent === 0 /* Auto */) {
            direction = guessDirection;
            animated = direction !== 0;
        }
        else {
            animated = this.animated;
            direction = intentToDirection(this.intent);
        }
        this.intent = 0 /* Auto */;
        this.animated = true;
        return {
            direction: direction,
            animated: animated
        };
    };
    NavController.prototype.guessDirection = function () {
        var index = this.stack.indexOf(document.location.href);
        if (index === -1) {
            this.stack.push(document.location.href);
            return 1;
        }
        else if (index < this.stack.length - 1) {
            this.stack = this.stack.slice(0, index + 1);
            return -1;
        }
        return 0;
    };
    NavController.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NavController.ctorParameters = function () { return [
        { type: Location },
        { type: Router, decorators: [{ type: Optional }] }
    ]; };
    return NavController;
}());
export { NavController };
function intentToDirection(intent) {
    switch (intent) {
        case 1 /* Forward */: return 1;
        case 2 /* Back */: return -1;
        default: return 0;
    }
}
