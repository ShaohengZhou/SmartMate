import { ElementRef, EventEmitter } from '@angular/core';
declare type StencilComponents<T extends keyof StencilElementInterfaces> = StencilElementInterfaces[T];
export declare function proxyInputs(instance: any, el: any, props: string[]): void;
export declare function proxyOutputs(instance: any, el: any, events: string[]): void;
export declare function proxyMethods(instance: any, el: any, methods: string[]): void;
export declare interface App extends StencilComponents<'IonApp'> {
}
export declare class App {
}
export declare interface Avatar extends StencilComponents<'IonAvatar'> {
}
export declare class Avatar {
}
export declare interface BackButton extends StencilComponents<'IonBackButton'> {
}
export declare class BackButton {
    constructor(r: ElementRef);
}
export declare interface Backdrop extends StencilComponents<'IonBackdrop'> {
}
export declare class Backdrop {
    ionBackdropTap: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Badge extends StencilComponents<'IonBadge'> {
}
export declare class Badge {
    constructor(r: ElementRef);
}
export declare interface Button extends StencilComponents<'IonButton'> {
}
export declare class Button {
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Buttons extends StencilComponents<'IonButtons'> {
}
export declare class Buttons {
}
export declare interface Card extends StencilComponents<'IonCard'> {
}
export declare class Card {
    constructor(r: ElementRef);
}
export declare interface CardContent extends StencilComponents<'IonCardContent'> {
}
export declare class CardContent {
    constructor(r: ElementRef);
}
export declare interface CardHeader extends StencilComponents<'IonCardHeader'> {
}
export declare class CardHeader {
    constructor(r: ElementRef);
}
export declare interface CardSubtitle extends StencilComponents<'IonCardSubtitle'> {
}
export declare class CardSubtitle {
    constructor(r: ElementRef);
}
export declare interface CardTitle extends StencilComponents<'IonCardTitle'> {
}
export declare class CardTitle {
    constructor(r: ElementRef);
}
export declare interface Checkbox extends StencilComponents<'IonCheckbox'> {
}
export declare class Checkbox {
    ionChange: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    ionStyle: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Chip extends StencilComponents<'IonChip'> {
}
export declare class Chip {
    constructor(r: ElementRef);
}
export declare interface ChipButton extends StencilComponents<'IonChipButton'> {
}
export declare class ChipButton {
    constructor(r: ElementRef);
}
export declare interface ChipIcon extends StencilComponents<'IonChipIcon'> {
}
export declare class ChipIcon {
    constructor(r: ElementRef);
}
export declare interface Col extends StencilComponents<'IonCol'> {
}
export declare class Col {
    constructor(r: ElementRef);
}
export declare interface Content extends StencilComponents<'IonContent'> {
}
export declare class Content {
    ionScrollStart: EventEmitter<CustomEvent>;
    ionScroll: EventEmitter<CustomEvent>;
    ionScrollEnd: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Datetime extends StencilComponents<'IonDatetime'> {
}
export declare class Datetime {
    ionCancel: EventEmitter<CustomEvent>;
    ionChange: EventEmitter<CustomEvent>;
    ionStyle: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Fab extends StencilComponents<'IonFab'> {
}
export declare class Fab {
    constructor(r: ElementRef);
}
export declare interface FabButton extends StencilComponents<'IonFabButton'> {
}
export declare class FabButton {
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface FabList extends StencilComponents<'IonFabList'> {
}
export declare class FabList {
    constructor(r: ElementRef);
}
export declare interface Footer extends StencilComponents<'IonFooter'> {
}
export declare class Footer {
    constructor(r: ElementRef);
}
export declare interface Grid extends StencilComponents<'IonGrid'> {
}
export declare class Grid {
    constructor(r: ElementRef);
}
export declare interface Header extends StencilComponents<'IonHeader'> {
}
export declare class Header {
    constructor(r: ElementRef);
}
export declare interface HideWhen extends StencilComponents<'IonHideWhen'> {
}
export declare class HideWhen {
    constructor(r: ElementRef);
}
export declare interface Icon extends StencilComponents<'IonIcon'> {
}
export declare class Icon {
    constructor(r: ElementRef);
}
export declare interface Img extends StencilComponents<'IonImg'> {
}
export declare class Img {
    ionImgDidLoad: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface InfiniteScroll extends StencilComponents<'IonInfiniteScroll'> {
}
export declare class InfiniteScroll {
    ionInfinite: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface InfiniteScrollContent extends StencilComponents<'IonInfiniteScrollContent'> {
}
export declare class InfiniteScrollContent {
    constructor(r: ElementRef);
}
export declare interface Input extends StencilComponents<'IonInput'> {
}
export declare class Input {
    ionInput: EventEmitter<CustomEvent>;
    ionChange: EventEmitter<CustomEvent>;
    ionStyle: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    ionInputDidLoad: EventEmitter<CustomEvent>;
    ionInputDidUnload: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Item extends StencilComponents<'IonItem'> {
}
export declare class Item {
    constructor(r: ElementRef);
}
export declare interface ItemDivider extends StencilComponents<'IonItemDivider'> {
}
export declare class ItemDivider {
    constructor(r: ElementRef);
}
export declare interface ItemGroup extends StencilComponents<'IonItemGroup'> {
}
export declare class ItemGroup {
}
export declare interface ItemOption extends StencilComponents<'IonItemOption'> {
}
export declare class ItemOption {
    constructor(r: ElementRef);
}
export declare interface ItemOptions extends StencilComponents<'IonItemOptions'> {
}
export declare class ItemOptions {
    ionSwipe: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface ItemSliding extends StencilComponents<'IonItemSliding'> {
}
export declare class ItemSliding {
    ionDrag: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Label extends StencilComponents<'IonLabel'> {
}
export declare class Label {
    ionStyle: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface List extends StencilComponents<'IonList'> {
}
export declare class List {
    constructor(r: ElementRef);
}
export declare interface ListHeader extends StencilComponents<'IonListHeader'> {
}
export declare class ListHeader {
    constructor(r: ElementRef);
}
export declare interface Menu extends StencilComponents<'IonMenu'> {
}
export declare class Menu {
    ionWillOpen: EventEmitter<CustomEvent>;
    ionWillClose: EventEmitter<CustomEvent>;
    ionDidOpen: EventEmitter<CustomEvent>;
    ionDidClose: EventEmitter<CustomEvent>;
    ionMenuChange: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface MenuButton extends StencilComponents<'IonMenuButton'> {
}
export declare class MenuButton {
    constructor(r: ElementRef);
}
export declare interface MenuToggle extends StencilComponents<'IonMenuToggle'> {
}
export declare class MenuToggle {
    constructor(r: ElementRef);
}
export declare interface Nav extends StencilComponents<'IonNav'> {
}
export declare class Nav {
    ionNavWillLoad: EventEmitter<CustomEvent>;
    ionNavWillChange: EventEmitter<CustomEvent>;
    ionNavDidChange: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface NavPop extends StencilComponents<'IonNavPop'> {
}
export declare class NavPop {
}
export declare interface NavPush extends StencilComponents<'IonNavPush'> {
}
export declare class NavPush {
    constructor(r: ElementRef);
}
export declare interface NavSetRoot extends StencilComponents<'IonNavSetRoot'> {
}
export declare class NavSetRoot {
    constructor(r: ElementRef);
}
export declare interface Note extends StencilComponents<'IonNote'> {
}
export declare class Note {
    constructor(r: ElementRef);
}
export declare interface Radio extends StencilComponents<'IonRadio'> {
}
export declare class Radio {
    ionRadioDidLoad: EventEmitter<CustomEvent>;
    ionRadioDidUnload: EventEmitter<CustomEvent>;
    ionStyle: EventEmitter<CustomEvent>;
    ionSelect: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface RadioGroup extends StencilComponents<'IonRadioGroup'> {
}
export declare class RadioGroup {
    ionChange: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Range extends StencilComponents<'IonRange'> {
}
export declare class Range {
    ionChange: EventEmitter<CustomEvent>;
    ionStyle: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Refresher extends StencilComponents<'IonRefresher'> {
}
export declare class Refresher {
    ionRefresh: EventEmitter<CustomEvent>;
    ionPull: EventEmitter<CustomEvent>;
    ionStart: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface RefresherContent extends StencilComponents<'IonRefresherContent'> {
}
export declare class RefresherContent {
    constructor(r: ElementRef);
}
export declare interface Reorder extends StencilComponents<'IonReorder'> {
}
export declare class Reorder {
}
export declare interface ReorderGroup extends StencilComponents<'IonReorderGroup'> {
}
export declare class ReorderGroup {
    ionItemReorder: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface RippleEffect extends StencilComponents<'IonRippleEffect'> {
}
export declare class RippleEffect {
    constructor(r: ElementRef);
}
export declare interface Row extends StencilComponents<'IonRow'> {
}
export declare class Row {
}
export declare interface Searchbar extends StencilComponents<'IonSearchbar'> {
}
export declare class Searchbar {
    ionInput: EventEmitter<CustomEvent>;
    ionChange: EventEmitter<CustomEvent>;
    ionCancel: EventEmitter<CustomEvent>;
    ionClear: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Segment extends StencilComponents<'IonSegment'> {
}
export declare class Segment {
    ionChange: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface SegmentButton extends StencilComponents<'IonSegmentButton'> {
}
export declare class SegmentButton {
    ionSelect: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Select extends StencilComponents<'IonSelect'> {
}
export declare class Select {
    ionChange: EventEmitter<CustomEvent>;
    ionCancel: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    ionStyle: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface SelectOption extends StencilComponents<'IonSelectOption'> {
}
export declare class SelectOption {
    ionSelectOptionDidLoad: EventEmitter<CustomEvent>;
    ionSelectOptionDidUnload: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface SelectPopover extends StencilComponents<'IonSelectPopover'> {
}
export declare class SelectPopover {
    constructor(r: ElementRef);
}
export declare interface ShowWhen extends StencilComponents<'IonShowWhen'> {
}
export declare class ShowWhen {
    constructor(r: ElementRef);
}
export declare interface SkeletonText extends StencilComponents<'IonSkeletonText'> {
}
export declare class SkeletonText {
    constructor(r: ElementRef);
}
export declare interface Slide extends StencilComponents<'IonSlide'> {
}
export declare class Slide {
    ionSlideChanged: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Slides extends StencilComponents<'IonSlides'> {
}
export declare class Slides {
    ionSlidesDidLoad: EventEmitter<CustomEvent>;
    ionSlideTap: EventEmitter<CustomEvent>;
    ionSlideDoubleTap: EventEmitter<CustomEvent>;
    ionSlideWillChange: EventEmitter<CustomEvent>;
    ionSlideDidChange: EventEmitter<CustomEvent>;
    ionSlideNextStart: EventEmitter<CustomEvent>;
    ionSlidePrevStart: EventEmitter<CustomEvent>;
    ionSlideNextEnd: EventEmitter<CustomEvent>;
    ionSlidePrevEnd: EventEmitter<CustomEvent>;
    ionSlideTransitionStart: EventEmitter<CustomEvent>;
    ionSlideTransitionEnd: EventEmitter<CustomEvent>;
    ionSlideDrag: EventEmitter<CustomEvent>;
    ionSlideReachStart: EventEmitter<CustomEvent>;
    ionSlideReachEnd: EventEmitter<CustomEvent>;
    ionSlideTouchStart: EventEmitter<CustomEvent>;
    ionSlideTouchEnd: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Spinner extends StencilComponents<'IonSpinner'> {
}
export declare class Spinner {
    constructor(r: ElementRef);
}
export declare interface SplitPane extends StencilComponents<'IonSplitPane'> {
}
export declare class SplitPane {
    ionChange: EventEmitter<CustomEvent>;
    ionSplitPaneVisible: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Tab extends StencilComponents<'IonTab'> {
}
export declare class Tab {
    ionSelect: EventEmitter<CustomEvent>;
    ionTabMutated: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Tabs extends StencilComponents<'IonTabs'> {
}
export declare class Tabs {
    ionChange: EventEmitter<CustomEvent>;
    ionNavWillLoad: EventEmitter<CustomEvent>;
    ionNavWillChange: EventEmitter<CustomEvent>;
    ionNavDidChange: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Text extends StencilComponents<'IonText'> {
}
export declare class Text {
    constructor(r: ElementRef);
}
export declare interface Textarea extends StencilComponents<'IonTextarea'> {
}
export declare class Textarea {
    ionChange: EventEmitter<CustomEvent>;
    ionInput: EventEmitter<CustomEvent>;
    ionStyle: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Thumbnail extends StencilComponents<'IonThumbnail'> {
}
export declare class Thumbnail {
}
export declare interface Toggle extends StencilComponents<'IonToggle'> {
}
export declare class Toggle {
    ionChange: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    ionStyle: EventEmitter<CustomEvent>;
    constructor(r: ElementRef);
}
export declare interface Toolbar extends StencilComponents<'IonToolbar'> {
}
export declare class Toolbar {
    constructor(r: ElementRef);
}
export declare interface ToolbarTitle extends StencilComponents<'IonTitle'> {
}
export declare class ToolbarTitle {
    constructor(r: ElementRef);
}
export {};
