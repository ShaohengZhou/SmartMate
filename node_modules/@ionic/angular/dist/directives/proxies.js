/* tslint:disable */
/* auto-generated angular directive proxies */
import { fromEvent } from 'rxjs';
import { ChangeDetectionStrategy, Component, ElementRef, ViewEncapsulation } from '@angular/core';
export function proxyInputs(instance, el, props) {
    props.forEach(function (propName) {
        Object.defineProperty(instance, propName, {
            get: function () { return el[propName]; }, set: function (val) { return el[propName] = val; }
        });
    });
}
export function proxyOutputs(instance, el, events) {
    events.forEach(function (eventName) { return instance[eventName] = fromEvent(el, eventName); });
}
export function proxyMethods(instance, el, methods) {
    methods.forEach(function (methodName) {
        Object.defineProperty(instance, methodName, {
            get: function () {
                return function () {
                    var args = arguments;
                    return el.componentOnReady().then(function (el) { return el[methodName].apply(el, args); });
                };
            }
        });
    });
}
var App = /** @class */ (function () {
    function App() {
    }
    App.decorators = [
        { type: Component, args: [{ selector: 'ion-app', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' },] },
    ];
    return App;
}());
export { App };
var Avatar = /** @class */ (function () {
    function Avatar() {
    }
    Avatar.decorators = [
        { type: Component, args: [{ selector: 'ion-avatar', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' },] },
    ];
    return Avatar;
}());
export { Avatar };
var BackButton = /** @class */ (function () {
    function BackButton(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'defaultHref', 'icon', 'text']);
    }
    BackButton.decorators = [
        { type: Component, args: [{ selector: 'ion-back-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'defaultHref', 'icon', 'text'] },] },
    ];
    /** @nocollapse */
    BackButton.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return BackButton;
}());
export { BackButton };
var Backdrop = /** @class */ (function () {
    function Backdrop(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['visible', 'tappable', 'stopPropagation']);
        proxyOutputs(this, el, ['ionBackdropTap']);
    }
    Backdrop.decorators = [
        { type: Component, args: [{ selector: 'ion-backdrop', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['visible', 'tappable', 'stopPropagation'] },] },
    ];
    /** @nocollapse */
    Backdrop.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Backdrop;
}());
export { Backdrop };
var Badge = /** @class */ (function () {
    function Badge(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    Badge.decorators = [
        { type: Component, args: [{ selector: 'ion-badge', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] },] },
    ];
    /** @nocollapse */
    Badge.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Badge;
}());
export { Badge };
var Button = /** @class */ (function () {
    function Button(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'buttonType', 'disabled', 'expand', 'fill', 'routerDirection', 'href', 'shape', 'size', 'strong', 'type']);
        proxyOutputs(this, el, ['ionFocus', 'ionBlur']);
    }
    Button.decorators = [
        { type: Component, args: [{ selector: 'ion-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'buttonType', 'disabled', 'expand', 'fill', 'routerDirection', 'href', 'shape', 'size', 'strong', 'type'] },] },
    ];
    /** @nocollapse */
    Button.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Button;
}());
export { Button };
var Buttons = /** @class */ (function () {
    function Buttons() {
    }
    Buttons.decorators = [
        { type: Component, args: [{ selector: 'ion-buttons', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' },] },
    ];
    return Buttons;
}());
export { Buttons };
var Card = /** @class */ (function () {
    function Card(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    Card.decorators = [
        { type: Component, args: [{ selector: 'ion-card', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] },] },
    ];
    /** @nocollapse */
    Card.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Card;
}());
export { Card };
var CardContent = /** @class */ (function () {
    function CardContent(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode']);
    }
    CardContent.decorators = [
        { type: Component, args: [{ selector: 'ion-card-content', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode'] },] },
    ];
    /** @nocollapse */
    CardContent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return CardContent;
}());
export { CardContent };
var CardHeader = /** @class */ (function () {
    function CardHeader(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'translucent']);
    }
    CardHeader.decorators = [
        { type: Component, args: [{ selector: 'ion-card-header', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'translucent'] },] },
    ];
    /** @nocollapse */
    CardHeader.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return CardHeader;
}());
export { CardHeader };
var CardSubtitle = /** @class */ (function () {
    function CardSubtitle(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    CardSubtitle.decorators = [
        { type: Component, args: [{ selector: 'ion-card-subtitle', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] },] },
    ];
    /** @nocollapse */
    CardSubtitle.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return CardSubtitle;
}());
export { CardSubtitle };
var CardTitle = /** @class */ (function () {
    function CardTitle(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    CardTitle.decorators = [
        { type: Component, args: [{ selector: 'ion-card-title', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] },] },
    ];
    /** @nocollapse */
    CardTitle.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return CardTitle;
}());
export { CardTitle };
var Checkbox = /** @class */ (function () {
    function Checkbox(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'name', 'checked', 'disabled', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionFocus', 'ionBlur', 'ionStyle']);
    }
    Checkbox.decorators = [
        { type: Component, args: [{ selector: 'ion-checkbox', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'name', 'checked', 'disabled', 'value'] },] },
    ];
    /** @nocollapse */
    Checkbox.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Checkbox;
}());
export { Checkbox };
var Chip = /** @class */ (function () {
    function Chip(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    Chip.decorators = [
        { type: Component, args: [{ selector: 'ion-chip', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] },] },
    ];
    /** @nocollapse */
    Chip.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Chip;
}());
export { Chip };
var ChipButton = /** @class */ (function () {
    function ChipButton(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'disabled', 'fill', 'href']);
    }
    ChipButton.decorators = [
        { type: Component, args: [{ selector: 'ion-chip-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'disabled', 'fill', 'href'] },] },
    ];
    /** @nocollapse */
    ChipButton.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ChipButton;
}());
export { ChipButton };
var ChipIcon = /** @class */ (function () {
    function ChipIcon(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'fill', 'name', 'src']);
    }
    ChipIcon.decorators = [
        { type: Component, args: [{ selector: 'ion-chip-icon', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'fill', 'name', 'src'] },] },
    ];
    /** @nocollapse */
    ChipIcon.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ChipIcon;
}());
export { ChipIcon };
var Col = /** @class */ (function () {
    function Col(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['offset', 'offsetXs', 'offsetSm', 'offsetMd', 'offsetLg', 'offsetXl', 'pull', 'pullXs', 'pullSm', 'pullMd', 'pullLg', 'pullXl', 'push', 'pushXs', 'pushSm', 'pushMd', 'pushLg', 'pushXl', 'size', 'sizeXs', 'sizeSm', 'sizeMd', 'sizeLg', 'sizeXl']);
    }
    Col.decorators = [
        { type: Component, args: [{ selector: 'ion-col', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['offset', 'offsetXs', 'offsetSm', 'offsetMd', 'offsetLg', 'offsetXl', 'pull', 'pullXs', 'pullSm', 'pullMd', 'pullLg', 'pullXl', 'push', 'pushXs', 'pushSm', 'pushMd', 'pushLg', 'pushXl', 'size', 'sizeXs', 'sizeSm', 'sizeMd', 'sizeLg', 'sizeXl'] },] },
    ];
    /** @nocollapse */
    Col.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Col;
}());
export { Col };
var Content = /** @class */ (function () {
    function Content(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['getScrollElement', 'scrollToTop', 'scrollToBottom', 'scrollByPoint', 'scrollToPoint']);
        proxyInputs(this, el, ['color', 'fullscreen', 'forceOverscroll', 'scrollX', 'scrollY', 'scrollEvents']);
        proxyOutputs(this, el, ['ionScrollStart', 'ionScroll', 'ionScrollEnd']);
    }
    Content.decorators = [
        { type: Component, args: [{ selector: 'ion-content', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'fullscreen', 'forceOverscroll', 'scrollX', 'scrollY', 'scrollEvents'] },] },
    ];
    /** @nocollapse */
    Content.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Content;
}());
export { Content };
var Datetime = /** @class */ (function () {
    function Datetime(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['open']);
        proxyInputs(this, el, ['mode', 'disabled', 'min', 'max', 'displayFormat', 'pickerFormat', 'cancelText', 'doneText', 'yearValues', 'monthValues', 'dayValues', 'hourValues', 'minuteValues', 'monthNames', 'monthShortNames', 'dayNames', 'dayShortNames', 'pickerOptions', 'placeholder', 'value']);
        proxyOutputs(this, el, ['ionCancel', 'ionChange', 'ionStyle']);
    }
    Datetime.decorators = [
        { type: Component, args: [{ selector: 'ion-datetime', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'disabled', 'min', 'max', 'displayFormat', 'pickerFormat', 'cancelText', 'doneText', 'yearValues', 'monthValues', 'dayValues', 'hourValues', 'minuteValues', 'monthNames', 'monthShortNames', 'dayNames', 'dayShortNames', 'pickerOptions', 'placeholder', 'value'] },] },
    ];
    /** @nocollapse */
    Datetime.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Datetime;
}());
export { Datetime };
var Fab = /** @class */ (function () {
    function Fab(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['close']);
        proxyInputs(this, el, ['horizontal', 'vertical', 'edge', 'activated']);
    }
    Fab.decorators = [
        { type: Component, args: [{ selector: 'ion-fab', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['horizontal', 'vertical', 'edge', 'activated'] },] },
    ];
    /** @nocollapse */
    Fab.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Fab;
}());
export { Fab };
var FabButton = /** @class */ (function () {
    function FabButton(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'color', 'activated', 'disabled', 'href', 'routerDirection', 'show', 'translucent', 'type']);
        proxyOutputs(this, el, ['ionFocus', 'ionBlur']);
    }
    FabButton.decorators = [
        { type: Component, args: [{ selector: 'ion-fab-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color', 'activated', 'disabled', 'href', 'routerDirection', 'show', 'translucent', 'type'] },] },
    ];
    /** @nocollapse */
    FabButton.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return FabButton;
}());
export { FabButton };
var FabList = /** @class */ (function () {
    function FabList(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['activated', 'side']);
    }
    FabList.decorators = [
        { type: Component, args: [{ selector: 'ion-fab-list', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['activated', 'side'] },] },
    ];
    /** @nocollapse */
    FabList.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return FabList;
}());
export { FabList };
var Footer = /** @class */ (function () {
    function Footer(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'translucent']);
    }
    Footer.decorators = [
        { type: Component, args: [{ selector: 'ion-footer', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'translucent'] },] },
    ];
    /** @nocollapse */
    Footer.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Footer;
}());
export { Footer };
var Grid = /** @class */ (function () {
    function Grid(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['fixed']);
    }
    Grid.decorators = [
        { type: Component, args: [{ selector: 'ion-grid', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['fixed'] },] },
    ];
    /** @nocollapse */
    Grid.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Grid;
}());
export { Grid };
var Header = /** @class */ (function () {
    function Header(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'translucent']);
    }
    Header.decorators = [
        { type: Component, args: [{ selector: 'ion-header', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'translucent'] },] },
    ];
    /** @nocollapse */
    Header.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Header;
}());
export { Header };
var HideWhen = /** @class */ (function () {
    function HideWhen(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['modes', 'orientation', 'mediaQuery', 'size', 'platform', 'or']);
    }
    HideWhen.decorators = [
        { type: Component, args: [{ selector: 'ion-hide-when', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['modes', 'orientation', 'mediaQuery', 'size', 'platform', 'or'] },] },
    ];
    /** @nocollapse */
    HideWhen.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return HideWhen;
}());
export { HideWhen };
var Icon = /** @class */ (function () {
    function Icon(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['ariaLabel', 'color', 'icon', 'ios', 'lazy', 'md', 'mode', 'name', 'size', 'src']);
    }
    Icon.decorators = [
        { type: Component, args: [{ selector: 'ion-icon', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['ariaLabel', 'color', 'icon', 'ios', 'lazy', 'md', 'mode', 'name', 'size', 'src'] },] },
    ];
    /** @nocollapse */
    Icon.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Icon;
}());
export { Icon };
var Img = /** @class */ (function () {
    function Img(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['alt', 'src']);
        proxyOutputs(this, el, ['ionImgDidLoad']);
    }
    Img.decorators = [
        { type: Component, args: [{ selector: 'ion-img', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['alt', 'src'] },] },
    ];
    /** @nocollapse */
    Img.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Img;
}());
export { Img };
var InfiniteScroll = /** @class */ (function () {
    function InfiniteScroll(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['complete']);
        proxyInputs(this, el, ['threshold', 'disabled', 'position']);
        proxyOutputs(this, el, ['ionInfinite']);
    }
    InfiniteScroll.decorators = [
        { type: Component, args: [{ selector: 'ion-infinite-scroll', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['threshold', 'disabled', 'position'] },] },
    ];
    /** @nocollapse */
    InfiniteScroll.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return InfiniteScroll;
}());
export { InfiniteScroll };
var InfiniteScrollContent = /** @class */ (function () {
    function InfiniteScrollContent(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['loadingSpinner', 'loadingText']);
    }
    InfiniteScrollContent.decorators = [
        { type: Component, args: [{ selector: 'ion-infinite-scroll-content', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['loadingSpinner', 'loadingText'] },] },
    ];
    /** @nocollapse */
    InfiniteScrollContent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return InfiniteScrollContent;
}());
export { InfiniteScrollContent };
var Input = /** @class */ (function () {
    function Input(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['setFocus']);
        proxyInputs(this, el, ['color', 'mode', 'accept', 'autocapitalize', 'autocomplete', 'autocorrect', 'autofocus', 'clearInput', 'clearOnEdit', 'debounce', 'disabled', 'inputmode', 'max', 'maxlength', 'min', 'minlength', 'multiple', 'name', 'pattern', 'placeholder', 'readonly', 'required', 'results', 'spellcheck', 'step', 'size', 'type', 'value']);
        proxyOutputs(this, el, ['ionInput', 'ionChange', 'ionStyle', 'ionBlur', 'ionFocus', 'ionInputDidLoad', 'ionInputDidUnload']);
    }
    Input.decorators = [
        { type: Component, args: [{ selector: 'ion-input', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'accept', 'autocapitalize', 'autocomplete', 'autocorrect', 'autofocus', 'clearInput', 'clearOnEdit', 'debounce', 'disabled', 'inputmode', 'max', 'maxlength', 'min', 'minlength', 'multiple', 'name', 'pattern', 'placeholder', 'readonly', 'required', 'results', 'spellcheck', 'step', 'size', 'type', 'value'] },] },
    ];
    /** @nocollapse */
    Input.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Input;
}());
export { Input };
var Item = /** @class */ (function () {
    function Item(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'button', 'detail', 'detailIcon', 'disabled', 'href', 'lines', 'routerDirection', 'type']);
    }
    Item.decorators = [
        { type: Component, args: [{ selector: 'ion-item', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'button', 'detail', 'detailIcon', 'disabled', 'href', 'lines', 'routerDirection', 'type'] },] },
    ];
    /** @nocollapse */
    Item.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Item;
}());
export { Item };
var ItemDivider = /** @class */ (function () {
    function ItemDivider(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    ItemDivider.decorators = [
        { type: Component, args: [{ selector: 'ion-item-divider', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] },] },
    ];
    /** @nocollapse */
    ItemDivider.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ItemDivider;
}());
export { ItemDivider };
var ItemGroup = /** @class */ (function () {
    function ItemGroup() {
    }
    ItemGroup.decorators = [
        { type: Component, args: [{ selector: 'ion-item-group', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' },] },
    ];
    return ItemGroup;
}());
export { ItemGroup };
var ItemOption = /** @class */ (function () {
    function ItemOption(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'disabled', 'expandable', 'href']);
    }
    ItemOption.decorators = [
        { type: Component, args: [{ selector: 'ion-item-option', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'disabled', 'expandable', 'href'] },] },
    ];
    /** @nocollapse */
    ItemOption.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ItemOption;
}());
export { ItemOption };
var ItemOptions = /** @class */ (function () {
    function ItemOptions(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['fireSwipeEvent']);
        proxyInputs(this, el, ['side']);
        proxyOutputs(this, el, ['ionSwipe']);
    }
    ItemOptions.decorators = [
        { type: Component, args: [{ selector: 'ion-item-options', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['side'] },] },
    ];
    /** @nocollapse */
    ItemOptions.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ItemOptions;
}());
export { ItemOptions };
var ItemSliding = /** @class */ (function () {
    function ItemSliding(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['getOpenAmount', 'getSlidingRatio', 'close', 'closeOpened']);
        proxyInputs(this, el, ['disabled']);
        proxyOutputs(this, el, ['ionDrag']);
    }
    ItemSliding.decorators = [
        { type: Component, args: [{ selector: 'ion-item-sliding', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['disabled'] },] },
    ];
    /** @nocollapse */
    ItemSliding.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ItemSliding;
}());
export { ItemSliding };
var Label = /** @class */ (function () {
    function Label(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'position']);
        proxyOutputs(this, el, ['ionStyle']);
    }
    Label.decorators = [
        { type: Component, args: [{ selector: 'ion-label', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'position'] },] },
    ];
    /** @nocollapse */
    Label.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Label;
}());
export { Label };
var List = /** @class */ (function () {
    function List(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['closeSlidingItems']);
        proxyInputs(this, el, ['mode', 'lines', 'inset']);
    }
    List.decorators = [
        { type: Component, args: [{ selector: 'ion-list', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'lines', 'inset'] },] },
    ];
    /** @nocollapse */
    List.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return List;
}());
export { List };
var ListHeader = /** @class */ (function () {
    function ListHeader(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'color']);
    }
    ListHeader.decorators = [
        { type: Component, args: [{ selector: 'ion-list-header', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color'] },] },
    ];
    /** @nocollapse */
    ListHeader.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ListHeader;
}());
export { ListHeader };
var Menu = /** @class */ (function () {
    function Menu(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['isOpen', 'isActive', 'open', 'close', 'toggle', 'setOpen']);
        proxyInputs(this, el, ['contentId', 'menuId', 'type', 'disabled', 'side', 'swipeGesture', 'maxEdgeStart']);
        proxyOutputs(this, el, ['ionWillOpen', 'ionWillClose', 'ionDidOpen', 'ionDidClose', 'ionMenuChange']);
    }
    Menu.decorators = [
        { type: Component, args: [{ selector: 'ion-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['contentId', 'menuId', 'type', 'disabled', 'side', 'swipeGesture', 'maxEdgeStart'] },] },
    ];
    /** @nocollapse */
    Menu.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Menu;
}());
export { Menu };
var MenuButton = /** @class */ (function () {
    function MenuButton(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'menu', 'autoHide']);
    }
    MenuButton.decorators = [
        { type: Component, args: [{ selector: 'ion-menu-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'menu', 'autoHide'] },] },
    ];
    /** @nocollapse */
    MenuButton.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return MenuButton;
}());
export { MenuButton };
var MenuToggle = /** @class */ (function () {
    function MenuToggle(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['menu', 'autoHide']);
    }
    MenuToggle.decorators = [
        { type: Component, args: [{ selector: 'ion-menu-toggle', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['menu', 'autoHide'] },] },
    ];
    /** @nocollapse */
    MenuToggle.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return MenuToggle;
}());
export { MenuToggle };
var Nav = /** @class */ (function () {
    function Nav(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['push', 'insert', 'insertPages', 'pop', 'popTo', 'popToRoot', 'removeIndex', 'setRoot', 'setPages', 'setRouteId', 'getRouteId', 'getActive', 'getByIndex', 'canGoBack', 'getPrevious']);
        proxyInputs(this, el, ['delegate', 'swipeGesture', 'animated', 'animation', 'rootParams', 'root']);
        proxyOutputs(this, el, ['ionNavWillLoad', 'ionNavWillChange', 'ionNavDidChange']);
    }
    Nav.decorators = [
        { type: Component, args: [{ selector: 'ion-nav', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['delegate', 'swipeGesture', 'animated', 'animation', 'rootParams', 'root'] },] },
    ];
    /** @nocollapse */
    Nav.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Nav;
}());
export { Nav };
var NavPop = /** @class */ (function () {
    function NavPop() {
    }
    NavPop.decorators = [
        { type: Component, args: [{ selector: 'ion-nav-pop', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' },] },
    ];
    return NavPop;
}());
export { NavPop };
var NavPush = /** @class */ (function () {
    function NavPush(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['component', 'componentProps']);
    }
    NavPush.decorators = [
        { type: Component, args: [{ selector: 'ion-nav-push', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['component', 'componentProps'] },] },
    ];
    /** @nocollapse */
    NavPush.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return NavPush;
}());
export { NavPush };
var NavSetRoot = /** @class */ (function () {
    function NavSetRoot(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['component', 'componentProps']);
    }
    NavSetRoot.decorators = [
        { type: Component, args: [{ selector: 'ion-nav-set-root', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['component', 'componentProps'] },] },
    ];
    /** @nocollapse */
    NavSetRoot.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return NavSetRoot;
}());
export { NavSetRoot };
var Note = /** @class */ (function () {
    function Note(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    Note.decorators = [
        { type: Component, args: [{ selector: 'ion-note', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] },] },
    ];
    /** @nocollapse */
    Note.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Note;
}());
export { Note };
var Radio = /** @class */ (function () {
    function Radio(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'name', 'disabled', 'checked', 'value']);
        proxyOutputs(this, el, ['ionRadioDidLoad', 'ionRadioDidUnload', 'ionStyle', 'ionSelect', 'ionFocus', 'ionBlur']);
    }
    Radio.decorators = [
        { type: Component, args: [{ selector: 'ion-radio', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'name', 'disabled', 'checked', 'value'] },] },
    ];
    /** @nocollapse */
    Radio.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Radio;
}());
export { Radio };
var RadioGroup = /** @class */ (function () {
    function RadioGroup(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['allowEmptySelection', 'name', 'disabled', 'value']);
        proxyOutputs(this, el, ['ionChange']);
    }
    RadioGroup.decorators = [
        { type: Component, args: [{ selector: 'ion-radio-group', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['allowEmptySelection', 'name', 'disabled', 'value'] },] },
    ];
    /** @nocollapse */
    RadioGroup.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return RadioGroup;
}());
export { RadioGroup };
var Range = /** @class */ (function () {
    function Range(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'debounce', 'name', 'dualKnobs', 'min', 'max', 'pin', 'snaps', 'step', 'disabled', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionStyle', 'ionFocus', 'ionBlur']);
    }
    Range.decorators = [
        { type: Component, args: [{ selector: 'ion-range', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'debounce', 'name', 'dualKnobs', 'min', 'max', 'pin', 'snaps', 'step', 'disabled', 'value'] },] },
    ];
    /** @nocollapse */
    Range.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Range;
}());
export { Range };
var Refresher = /** @class */ (function () {
    function Refresher(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['complete', 'cancel', 'getProgress']);
        proxyInputs(this, el, ['pullMin', 'pullMax', 'closeDuration', 'snapbackDuration', 'disabled']);
        proxyOutputs(this, el, ['ionRefresh', 'ionPull', 'ionStart']);
    }
    Refresher.decorators = [
        { type: Component, args: [{ selector: 'ion-refresher', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['pullMin', 'pullMax', 'closeDuration', 'snapbackDuration', 'disabled'] },] },
    ];
    /** @nocollapse */
    Refresher.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Refresher;
}());
export { Refresher };
var RefresherContent = /** @class */ (function () {
    function RefresherContent(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['pullingIcon', 'pullingText', 'refreshingSpinner', 'refreshingText']);
    }
    RefresherContent.decorators = [
        { type: Component, args: [{ selector: 'ion-refresher-content', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['pullingIcon', 'pullingText', 'refreshingSpinner', 'refreshingText'] },] },
    ];
    /** @nocollapse */
    RefresherContent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return RefresherContent;
}());
export { RefresherContent };
var Reorder = /** @class */ (function () {
    function Reorder() {
    }
    Reorder.decorators = [
        { type: Component, args: [{ selector: 'ion-reorder', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' },] },
    ];
    return Reorder;
}());
export { Reorder };
var ReorderGroup = /** @class */ (function () {
    function ReorderGroup(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['complete']);
        proxyInputs(this, el, ['disabled']);
        proxyOutputs(this, el, ['ionItemReorder']);
    }
    ReorderGroup.decorators = [
        { type: Component, args: [{ selector: 'ion-reorder-group', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['disabled'] },] },
    ];
    /** @nocollapse */
    ReorderGroup.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ReorderGroup;
}());
export { ReorderGroup };
var RippleEffect = /** @class */ (function () {
    function RippleEffect(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['addRipple']);
    }
    RippleEffect.decorators = [
        { type: Component, args: [{ selector: 'ion-ripple-effect', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' },] },
    ];
    /** @nocollapse */
    RippleEffect.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return RippleEffect;
}());
export { RippleEffect };
var Row = /** @class */ (function () {
    function Row() {
    }
    Row.decorators = [
        { type: Component, args: [{ selector: 'ion-row', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' },] },
    ];
    return Row;
}());
export { Row };
var Searchbar = /** @class */ (function () {
    function Searchbar(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['setFocus']);
        proxyInputs(this, el, ['color', 'mode', 'animated', 'autocomplete', 'autocorrect', 'cancelButtonIcon', 'cancelButtonText', 'clearIcon', 'debounce', 'placeholder', 'searchIcon', 'showCancelButton', 'spellcheck', 'type', 'value']);
        proxyOutputs(this, el, ['ionInput', 'ionChange', 'ionCancel', 'ionClear', 'ionBlur', 'ionFocus']);
    }
    Searchbar.decorators = [
        { type: Component, args: [{ selector: 'ion-searchbar', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'animated', 'autocomplete', 'autocorrect', 'cancelButtonIcon', 'cancelButtonText', 'clearIcon', 'debounce', 'placeholder', 'searchIcon', 'showCancelButton', 'spellcheck', 'type', 'value'] },] },
    ];
    /** @nocollapse */
    Searchbar.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Searchbar;
}());
export { Searchbar };
var Segment = /** @class */ (function () {
    function Segment(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'disabled', 'value']);
        proxyOutputs(this, el, ['ionChange']);
    }
    Segment.decorators = [
        { type: Component, args: [{ selector: 'ion-segment', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'disabled', 'value'] },] },
    ];
    /** @nocollapse */
    Segment.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Segment;
}());
export { Segment };
var SegmentButton = /** @class */ (function () {
    function SegmentButton(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'checked', 'disabled', 'value']);
        proxyOutputs(this, el, ['ionSelect']);
    }
    SegmentButton.decorators = [
        { type: Component, args: [{ selector: 'ion-segment-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'checked', 'disabled', 'value'] },] },
    ];
    /** @nocollapse */
    SegmentButton.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return SegmentButton;
}());
export { SegmentButton };
var Select = /** @class */ (function () {
    function Select(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['open']);
        proxyInputs(this, el, ['mode', 'disabled', 'cancelText', 'okText', 'placeholder', 'name', 'selectedText', 'multiple', 'interface', 'interfaceOptions', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionCancel', 'ionFocus', 'ionBlur', 'ionStyle']);
    }
    Select.decorators = [
        { type: Component, args: [{ selector: 'ion-select', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'disabled', 'cancelText', 'okText', 'placeholder', 'name', 'selectedText', 'multiple', 'interface', 'interfaceOptions', 'value'] },] },
    ];
    /** @nocollapse */
    Select.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Select;
}());
export { Select };
var SelectOption = /** @class */ (function () {
    function SelectOption(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['disabled', 'selected', 'value']);
        proxyOutputs(this, el, ['ionSelectOptionDidLoad', 'ionSelectOptionDidUnload']);
    }
    SelectOption.decorators = [
        { type: Component, args: [{ selector: 'ion-select-option', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['disabled', 'selected', 'value'] },] },
    ];
    /** @nocollapse */
    SelectOption.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return SelectOption;
}());
export { SelectOption };
var SelectPopover = /** @class */ (function () {
    function SelectPopover(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['header', 'subHeader', 'message', 'options']);
    }
    SelectPopover.decorators = [
        { type: Component, args: [{ selector: 'ion-select-popover', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['header', 'subHeader', 'message', 'options'] },] },
    ];
    /** @nocollapse */
    SelectPopover.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return SelectPopover;
}());
export { SelectPopover };
var ShowWhen = /** @class */ (function () {
    function ShowWhen(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['modes', 'orientation', 'mediaQuery', 'size', 'platform', 'or']);
    }
    ShowWhen.decorators = [
        { type: Component, args: [{ selector: 'ion-show-when', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['modes', 'orientation', 'mediaQuery', 'size', 'platform', 'or'] },] },
    ];
    /** @nocollapse */
    ShowWhen.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ShowWhen;
}());
export { ShowWhen };
var SkeletonText = /** @class */ (function () {
    function SkeletonText(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['width']);
    }
    SkeletonText.decorators = [
        { type: Component, args: [{ selector: 'ion-skeleton-text', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['width'] },] },
    ];
    /** @nocollapse */
    SkeletonText.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return SkeletonText;
}());
export { SkeletonText };
var Slide = /** @class */ (function () {
    function Slide(r) {
        var el = r.nativeElement;
        proxyOutputs(this, el, ['ionSlideChanged']);
    }
    Slide.decorators = [
        { type: Component, args: [{ selector: 'ion-slide', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' },] },
    ];
    /** @nocollapse */
    Slide.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Slide;
}());
export { Slide };
var Slides = /** @class */ (function () {
    function Slides(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['update', 'slideTo', 'slideNext', 'slidePrev', 'getActiveIndex', 'getPreviousIndex', 'length', 'isEnd', 'isBeginning', 'startAutoplay', 'stopAutoplay', 'lockSwipeToNext', 'lockSwipeToPrev', 'lockSwipes']);
        proxyInputs(this, el, ['mode', 'options', 'pager', 'scrollbar']);
        proxyOutputs(this, el, ['ionSlidesDidLoad', 'ionSlideTap', 'ionSlideDoubleTap', 'ionSlideWillChange', 'ionSlideDidChange', 'ionSlideNextStart', 'ionSlidePrevStart', 'ionSlideNextEnd', 'ionSlidePrevEnd', 'ionSlideTransitionStart', 'ionSlideTransitionEnd', 'ionSlideDrag', 'ionSlideReachStart', 'ionSlideReachEnd', 'ionSlideTouchStart', 'ionSlideTouchEnd']);
    }
    Slides.decorators = [
        { type: Component, args: [{ selector: 'ion-slides', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'options', 'pager', 'scrollbar'] },] },
    ];
    /** @nocollapse */
    Slides.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Slides;
}());
export { Slides };
var Spinner = /** @class */ (function () {
    function Spinner(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'duration', 'name', 'paused']);
    }
    Spinner.decorators = [
        { type: Component, args: [{ selector: 'ion-spinner', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'duration', 'name', 'paused'] },] },
    ];
    /** @nocollapse */
    Spinner.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Spinner;
}());
export { Spinner };
var SplitPane = /** @class */ (function () {
    function SplitPane(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['disabled', 'when']);
        proxyOutputs(this, el, ['ionChange', 'ionSplitPaneVisible']);
    }
    SplitPane.decorators = [
        { type: Component, args: [{ selector: 'ion-split-pane', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['disabled', 'when'] },] },
    ];
    /** @nocollapse */
    SplitPane.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return SplitPane;
}());
export { SplitPane };
var Tab = /** @class */ (function () {
    function Tab(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['setActive']);
        proxyInputs(this, el, ['active', 'btnId', 'delegate', 'label', 'href', 'icon', 'badge', 'badgeColor', 'component', 'name', 'disabled', 'selected', 'show', 'tabsHideOnSubPages']);
        proxyOutputs(this, el, ['ionSelect', 'ionTabMutated']);
    }
    Tab.decorators = [
        { type: Component, args: [{ selector: 'ion-tab', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['active', 'btnId', 'delegate', 'label', 'href', 'icon', 'badge', 'badgeColor', 'component', 'name', 'disabled', 'selected', 'show', 'tabsHideOnSubPages'] },] },
    ];
    /** @nocollapse */
    Tab.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Tab;
}());
export { Tab };
var Tabs = /** @class */ (function () {
    function Tabs(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['select', 'setRouteId', 'getRouteId', 'getTab', 'getSelected']);
        proxyInputs(this, el, ['name', 'tabbarHidden', 'useRouter']);
        proxyOutputs(this, el, ['ionChange', 'ionNavWillLoad', 'ionNavWillChange', 'ionNavDidChange']);
    }
    Tabs.decorators = [
        { type: Component, args: [{ selector: 'ion-tabs', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['name', 'tabbarHidden', 'useRouter'] },] },
    ];
    /** @nocollapse */
    Tabs.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Tabs;
}());
export { Tabs };
var Text = /** @class */ (function () {
    function Text(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    Text.decorators = [
        { type: Component, args: [{ selector: 'ion-text', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] },] },
    ];
    /** @nocollapse */
    Text.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Text;
}());
export { Text };
var Textarea = /** @class */ (function () {
    function Textarea(r) {
        var el = r.nativeElement;
        proxyMethods(this, el, ['setFocus']);
        proxyInputs(this, el, ['mode', 'color', 'autocapitalize', 'autofocus', 'clearOnEdit', 'debounce', 'disabled', 'maxlength', 'minlength', 'name', 'placeholder', 'readonly', 'required', 'spellcheck', 'cols', 'rows', 'wrap', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionInput', 'ionStyle', 'ionBlur', 'ionFocus']);
    }
    Textarea.decorators = [
        { type: Component, args: [{ selector: 'ion-textarea', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color', 'autocapitalize', 'autofocus', 'clearOnEdit', 'debounce', 'disabled', 'maxlength', 'minlength', 'name', 'placeholder', 'readonly', 'required', 'spellcheck', 'cols', 'rows', 'wrap', 'value'] },] },
    ];
    /** @nocollapse */
    Textarea.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Textarea;
}());
export { Textarea };
var Thumbnail = /** @class */ (function () {
    function Thumbnail() {
    }
    Thumbnail.decorators = [
        { type: Component, args: [{ selector: 'ion-thumbnail', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' },] },
    ];
    return Thumbnail;
}());
export { Thumbnail };
var Toggle = /** @class */ (function () {
    function Toggle(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'color', 'name', 'checked', 'disabled', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionFocus', 'ionBlur', 'ionStyle']);
    }
    Toggle.decorators = [
        { type: Component, args: [{ selector: 'ion-toggle', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color', 'name', 'checked', 'disabled', 'value'] },] },
    ];
    /** @nocollapse */
    Toggle.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Toggle;
}());
export { Toggle };
var Toolbar = /** @class */ (function () {
    function Toolbar(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    Toolbar.decorators = [
        { type: Component, args: [{ selector: 'ion-toolbar', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] },] },
    ];
    /** @nocollapse */
    Toolbar.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return Toolbar;
}());
export { Toolbar };
var ToolbarTitle = /** @class */ (function () {
    function ToolbarTitle(r) {
        var el = r.nativeElement;
        proxyInputs(this, el, ['color']);
    }
    ToolbarTitle.decorators = [
        { type: Component, args: [{ selector: 'ion-title', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color'] },] },
    ];
    /** @nocollapse */
    ToolbarTitle.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ToolbarTitle;
}());
export { ToolbarTitle };
